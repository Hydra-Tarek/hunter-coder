{
    "title": "How to learn CSS",
    "content": "<header>\r\n    <h1>Follow these steps to become a CSS Superstar<\/h1>\r\n<\/header>\r\n<div><br><\/div>\r\n<figure>\r\n    <source media=\"(max-width: 700px)\" sizes=\"1px\" srcset=\"data:image\/gif;base64,R0lGODlhAQABAIAAAAAAAP\/\/\/yH5BAEAAAAALAAAAAABAAEAAAIBRAA7 1w\">\r\n    <source media=\"(min-width: 701px)\" sizes=\"(max-width: 800px) 400px, (max-width: 1170px) 700px, 1400px\" srcset=\"https:\/\/cdn-media-1.freecodecamp.org\/images\/1*H0IBb9kvGI3eIuL1sGmWug.jpeg\"><img src=\"https:\/\/cdn-media-1.freecodecamp.org\/images\/1*H0IBb9kvGI3eIuL1sGmWug.jpeg\" alt=\"Follow these steps to become a CSS Superstar\" width=\"800\" height=\"371\"><\/figure>\r\n<section>\r\n    <div>\r\n        <section>\r\n            <p>by Preetish HS<\/p>\r\n            <p>CSS (Cascading Style Sheets) is one of the core technologies used for building webpages. Since it is the ONLY style sheet language that browsers can understand, it&apos;s important to learn CSS in depth to master web development.<\/p>\r\n            <p>It&rsquo;s very easy to get started with CSS. With just a few hours of training, you can easily style texts, elements and layouts. However, it becomes progressively difficult and soon you&rsquo;ll come to a situation where your code starts getting quite messy. The components which used to work before start breaking, and you google and find the fix which fixes your element but breaks 5 other elements, as the solution you found on google changed the&nbsp;<code>display&nbsp;<\/code>or&nbsp;<code>position<\/code> ?<\/p>\r\n            <h3><strong>Why learning CSS the right way is important<\/strong><\/h3>\r\n            <p>If you don&rsquo;t have a deeper understanding of the basics, CSS becomes more like a&nbsp;<strong>trial and error method.&nbsp;<\/strong>You&rsquo;ll try different values for different properties and finally keep the one which sort of works close to what you wanted without actually understanding how it works.<\/p>\r\n            <p>You&rsquo;ll start googling basic things like&nbsp;<strong>&ldquo;how to centre two divs&rdquo;<\/strong> or&nbsp;<strong>&ldquo;how to align a div and a text vertically&rdquo;<\/strong> and copy paste the code from StackOverflow or codePen every time. Back in those days, when&nbsp;<strong>flexbox&nbsp;<\/strong>was not so popular,&nbsp;<strong>&ldquo;how do you align a div both vertically and horizontally in a page?&rdquo;&nbsp;<\/strong>was a classic CSS interview question. Many beginners could get the horizontal part right but only a few got the vertical part right too.<\/p>\r\n            <h3>The Roadmap ??<\/h3>\r\n            <h4><strong>1. The Basics ?<\/strong><\/h4>\r\n            <p>If you are just starting web development, learn some basics of&nbsp;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/HTML\/Introduction_to_HTML\" rel=\"noopener\">HTML<\/a> before starting CSS. In CSS, first read the theory on what CSS is, how it works in the browser, and its basic syntax and usage.<\/p>\r\n            <p>Learn about the different kinds of stylesheets available, their differences, selectors, and basic styling such as&nbsp;<code>font-size<\/code>,&nbsp;<code>width<\/code>,&nbsp;<code>height<\/code> etc.<\/p>\r\n            <p>You can get started by going through the tutorials at&nbsp;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/CSS\" rel=\"noopener\">MDN<\/a>.<\/p>\r\n            <h4><strong>2. CSS Box Model ?<\/strong><\/h4>\r\n            <figure><img src=\"https:\/\/cdn-media-1.freecodecamp.org\/images\/1*HnuCN_p4MiCMtOp7ziLpnA.png\" alt=\"1*HnuCN_p4MiCMtOp7ziLpnA\" width=\"800\" height=\"595\">\r\n                <figcaption>credit:&nbsp;<a href=\"https:\/\/developer.mozilla.org\/\" rel=\"noopener\" target=\"_blank\" title=\"\">https:\/\/developer.mozilla.org<\/a><\/figcaption>\r\n            <\/figure>\r\n            <p>Understand the basics of&nbsp;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Learn\/CSS\/Introduction_to_CSS\/Box_model\" rel=\"noopener\">CSS box mode<\/a>l and the properties associated with it such as&nbsp;<code>margin<\/code>,&nbsp;<code>border<\/code>,&nbsp;<code>padding&nbsp;<\/code>etc<\/p>\r\n            <h4><strong>3. Images and Background ?<\/strong><\/h4>\r\n            <p>Images make the webpage come alive. There are many ways to add an image such as image tags, adding background colours\/gradients and background images to various other tags. You could also apply what you have learnt previously such as setting borders to images or use multiple images and develop a simple gallery.<\/p>\r\n            <pre><code>&lt;img src=&quot;..\/images\/wallpaper.jpg&quot; &gt;&lt;div class=&quot;image&quot; &gt; &lt;\/div&gt;<\/code><\/pre>\r\n            <pre><code>.image {   background-image: url(..\/images\/wallpaper.jpg);}<\/code><\/pre>\r\n            <h4><strong>4. Display and Position ?<\/strong><\/h4>\r\n            <p>These two are some of the most import properties in CSS where you need to pay attention to understand them correctly. Knowing these two properties well can make your CSS journey a lot smoother.<\/p>\r\n            <pre><code> display: block | inline | inline-block | table | etc<\/code><\/pre>\r\n            <p>Understand how each of these&nbsp;<code>display&nbsp;<\/code>properties are used. You&rsquo;ll start to notice some HTML elements such as&nbsp;<code>&lt;d<\/code>i<code>v&amp;g<\/code>t; &amp;<code>lt;p<\/code>&gt; or &lt;h<code>1&gt; behave l<\/code>ike display: block and s<code>ome e<\/code>l<code>ements<\/code> like &lt;img<code>&gt; &lt;span&amp;g<\/code>t; behave like display: inline.<\/p>\r\n            <pre><code>position: static | absolute | relative | fixed | sticky<\/code><\/pre>\r\n            <p>This is one of the properties where even experienced programmers make mistakes. Learn how each of them works, how the position of one element affects its siblings or parent, in what situations you use them, etc.<\/p>\r\n            <p><strong><em>This step is so important that you can repeat it again and again till you understand!<\/em><\/strong><\/p>\r\n            <pre><code>float: left | right<\/code><\/pre>\r\n            <p>Though float layouts are a bit old school now, there are many old websites which still uses float layouts.<\/p>\r\n            <h4><strong>5. Colours, Fonts, lists and Tables \u2611\uFE0F<\/strong><\/h4>\r\n            <p>Understand different colour formats such as&nbsp;<code>HEX<\/code> code,&nbsp;<code>rgb<\/code>,&nbsp;<code>rgba<\/code>,&nbsp;<code>hsl<\/code>,&nbsp;<code>hsla<\/code>,&nbsp;<code>transparent<\/code> etc<\/p>\r\n            <pre><code>color: white;color: #fff;color: rgb(255, 255, 255);color: rgba(255, 255, 255, 1);color: hsl(0, 100%, 100%);color: hsla(0, 100%, 100%, 1);color: transparent;<\/code><\/pre>\r\n            <p>Learn how to use different fonts. Some fonts are not available on all browsers, so you&rsquo;ll need to learn to add fonts manually with&nbsp;<code>woff<\/code> or&nbsp;<code>ttf<\/code> files or importing google fonts.<\/p>\r\n            <p>CSS can turn a basic&nbsp;<em>unordered list<\/em> <code>&lt;<\/code>ul&gt; into a beautiful navigation bar! Years ago tables were used to create screen layouts, thank goodness we don&rsquo;t do that anymore! ?<\/p>\r\n            <h4><strong>6. Pseudo-classes and Combinators \u2795<\/strong><\/h4>\r\n            <p>A CSS&nbsp;<strong>pseudo-class<\/strong> is a keyword added to a selector that specifies a special state of the selected element(s). A pseudo-class can be as simple as&nbsp;<code>:hover&nbsp;<\/code>or&nbsp;<code>:visited<\/code> or something complex like :<code>nth-last-of-type(odd)<\/code><\/p>\r\n            <p><strong>Combinators&nbsp;<\/strong>help us apply styles to child elements or siblings easily without having to create new classes for each of them.<\/p>\r\n            <pre><code>\/* all the paragraph elements inside the container will have color red *\/<\/code><\/pre>\r\n            <pre><code>.container &gt; p {  color: yellow;}<\/code><\/pre>\r\n            <h4><strong>7. Debugging and Dev tools ?<\/strong><\/h4>\r\n            <p>CSS doesn&apos;t throw any errors. It silently breaks the UI if you don&rsquo;t get the styles correct ? so learning how to use Dev tools is very important.<\/p>\r\n            <p>Chrome Dev tools is an amazing tool for web developers. It&apos;s packed with a lot of great features for debugging your website in real-time and also has performance checking tools like&nbsp;<a href=\"https:\/\/developers.google.com\/web\/tools\/lighthouse\/\" rel=\"noopener\"><strong>lighthouse&nbsp;<\/strong><\/a>built into it.<\/p>\r\n            <h4><strong>8. Practice Practice Practice ?<\/strong><\/h4>\r\n            <figure><img src=\"https:\/\/cdn-media-1.freecodecamp.org\/images\/0*RapmXy8eJSyb2OX6\" alt=\"0*RapmXy8eJSyb2OX6\" width=\"800\" height=\"533\">\r\n                <figcaption>Photo by&nbsp;<a href=\"https:\/\/unsplash.com\/@rangel?utm_source=medium&utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">David Rangel<\/a> on&nbsp;<a href=\"https:\/\/unsplash.com\/?utm_source=medium&utm_medium=referral\" rel=\"noopener\" target=\"_blank\" title=\"\">Unsplash<\/a><\/figcaption>\r\n            <\/figure>\r\n            <p>The contents you learnt above are enough to develop a basic website, so at this point you should start practising by developing small websites. You&rsquo;ll come across various challenges when you build a real application. For your practice, you can develop a simple website for a resort, or build an image gallery, or a blog, or you can also build a few basic features of your favourite social media such as Facebook or Instagram.<\/p>\r\n            <h4><strong>9. Responsive Web Design ??<\/strong><\/h4>\r\n            <figure><img src=\"https:\/\/cdn-media-1.freecodecamp.org\/images\/1*ScNanqYCmVsKnRaPWosYIw.png\" alt=\"1*ScNanqYCmVsKnRaPWosYIw\" width=\"800\" height=\"340\">\r\n                <figcaption>credit: Wikipedia<\/figcaption>\r\n            <\/figure>\r\n            <p><strong>After learning web development for desktop there are a lot of other devices through which the websites are accessed. Supporting these devices is equally important. Before the Responsive design got popular, developers used to design a separate website for mobiles, a separate website for touch-enabled devices etc. remember&nbsp;<em>m.facebook.com<\/em> and&nbsp;<em>touch.facebook.com<\/em>?<\/strong><\/p>\r\n            <p><strong>There are 3 important things in Responsive web design:<\/strong><\/p>\r\n            <p><strong><strong>Fluid Layouts:<\/strong><\/strong><\/p>\r\n            <p><strong>Width set with&nbsp;<code>px&nbsp;<\/code>does not scale based on the browser window. To make the elements scale based on the browser size, we need to create fluid layouts by setting the sizes in&nbsp;<code>%&nbsp;<\/code>or&nbsp;<code>rem&nbsp;<\/code>units.<\/strong><\/p>\r\n            <p><strong><strong>Media Queries:<\/strong><\/strong><\/p>\r\n            <p><strong>A media query is a technique to include a block of CSS properties only if a certain condition is true. We set breakpoints based on our design and change the CSS depending on the browser width.<\/strong><\/p>\r\n            <p><strong><code>@media only screen and (max-width: 600px) {<\/code><\/strong><br><strong><code>&nbsp;body {<\/code><\/strong><br><strong><code>&nbsp; &nbsp;background-color: lightblue;<\/code><\/strong><br><strong><code>&nbsp;}<\/code><\/strong><br><strong><code>}<\/code><\/strong><\/p>\r\n            <p><strong><strong>Responsive images:<\/strong><\/strong><\/p>\r\n            <p><strong>Images scale down as the width of the browser window decreases or if the website is viewed in mobile devices. Sometimes it would be difficult to focus on the important details on a particular image so we&rsquo;d need to use different images for different screens.<\/strong><\/p>\r\n            <h4><strong><strong>10. Flexbox and Grid \u25FC\uFE0F \u2B1B ?<\/strong><\/strong><\/h4>\r\n            <p><strong>It&rsquo;s been around 10 years(!) since Flexbox was first introduced, but it was incorporated only recently in 2015. &mdash;<a href=\"http:\/\/annairish.github.io\/historicizing\/history\" rel=\"noopener\">&nbsp;source<\/a><\/strong><\/p>\r\n            <p><strong>Flexbox and Grid are the styles used to create flexible layouts, and they make our lives so much easier! This is one of the best things that has ever happened to CSS. ?<\/strong><\/p>\r\n            <p><strong>The layout shown below would have taken more than 300 lines of CSS code without Flexbox or Grid.<\/strong><\/p>\r\n            <h4><strong><strong>11. Transforms, transitions and animations ?<\/strong><\/strong><\/h4>\r\n            <p><strong>Learning basic transforms and transitions will come in handy if you want to create an interactive web page with moving parts on mouse events or keyboard events such as hover or click.<\/strong><\/p>\r\n            <p><strong>Before CSS3, animations were done mostly using jQuery &mdash; A JavaScript library. Now CSS has become so powerful that we can do complex animations without any JavaScript.<\/strong><\/p>\r\n            <h4><strong><strong>12. Preprocessors \u2734\uFE0F<\/strong><\/strong><\/h4>\r\n            <p><strong><strong>CSS preprocessors<\/strong> are scripting languages that extend the default capabilities of CSS. They enable us to use logic in our CSS code, such as variables, nesting, inheritance, mixins, functions, and mathematical operations. Some of the popular ones are&nbsp;<a href=\"http:\/\/sass-lang.com\/\" rel=\"noopener\">SASS<\/a>,&nbsp;<a href=\"http:\/\/lesscss.org\/\" rel=\"noopener\">LESS<\/a>,&nbsp;<a href=\"http:\/\/stylus-lang.com\/\" rel=\"noopener\">STYLUS&nbsp;<\/a>and&nbsp;<a href=\"http:\/\/postcss.org\/\" rel=\"noopener\">POSTCSS<\/a>.<\/strong><\/p>\r\n            <p><strong>The<strong>&nbsp;SCSS&nbsp;<\/strong>format of SASS is more widely used, so it&apos;s good to get started with SASS for development.<\/strong><\/p>\r\n            <p><strong>The&nbsp;<code>autoprefixer<\/code> plugin of POSTCSS makes your CSS rules compatible across various browsers by adding extra rules such as&nbsp;<code>-moz-<\/code> and<code>-webkit-<\/code>.<\/strong><\/p>\r\n            <h4><strong><strong>13. Frameworks&nbsp;<\/strong>?<\/strong><\/h4>\r\n            <p><strong>Learning frameworks such as&nbsp;<a href=\"http:\/\/getbootstrap.com\/\" rel=\"noopener\">Bootstrap<\/a>,&nbsp;<a href=\"http:\/\/semantic-ui.com\/\" rel=\"noopener\">Semantic-UI<\/a> or&nbsp;<a href=\"http:\/\/materializecss.com\/\" rel=\"noopener\">Materialize<\/a> is optional but very useful for faster development as they provide a lot of styles and layouts out of the box.<\/strong><\/p>\r\n            <p><strong>These Frameworks are tested across various browsers, so using these will avoid some of the compatibility issues. Most of the frameworks follow the responsive design pattern and lots of free 3rd party templates are be available to get started quickly.<\/strong><\/p>\r\n            <h4><strong><strong>14. Specificity&nbsp;<\/strong>?<\/strong><\/h4>\r\n            <p><strong>&ldquo;<em>tries to modify a button style of bootstrap but fails, googles for a solution, uses&nbsp;<code>!important<\/code> , gets all excited thinking that&rsquo;s the right fix for all the problems!<\/em>&rdquo; And that&apos;s how you doomed your project! ? If you understand the concept of S<a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/CSS\/Specificity\" rel=\"noopener\"><strong>pecificity&nbsp;<\/strong><\/a><strong>c<\/strong>orrectly, problems regarding overlapping rules in multiple stylesheets will be reduced significantly.<\/strong><\/p>\r\n            <p><strong>Specificity is a weight that is applied to a given CSS declaration, determined by the number of each selector type in the matching selector. Each selector has a different weight, and using multiple selectors can change the specificity. If the overall specificities are equal then the order is considered. See the example below:<\/strong><\/p>\r\n            <p><strong><code>&lt;style&gt;div.wrapper p.paragraph {<\/code><\/strong><br><strong><code>&nbsp; color: pink;<\/code><\/strong><br><strong><code>}#container p{<\/code><\/strong><br><strong><code>&nbsp; color: violet;<\/code><\/strong><br><strong><code>}p {<\/code><\/strong><br><strong><code>&nbsp;color: green;<\/code><\/strong><br><strong><code>}.paragraph {<\/code><\/strong><br><strong><code>&nbsp;color: yellow;<\/code><\/strong><br><strong><code>}<\/code><\/strong><br><strong><code>&lt;\/style&gt;&lt;div class=&quot;wrapper&quot; id=&quot;container&quot;&gt;<\/code><\/strong><br><strong><code>&nbsp; &lt;p class=&quot;paragraph&quot;&gt; This is a dummy text &lt;\/p&gt;<\/code><\/strong><br><strong><code>&lt;\/div&gt;<\/code><\/strong><\/p>\r\n            <p><strong>What do you think would be the colour of the paragraph? ?<\/strong><\/p>\r\n            <h4><strong><strong>15. CSS Architecture ?<\/strong><\/strong><\/h4>\r\n            <p><strong>Writing CSS code is easy, but writing maintainable CSS code is hard. A proper structure and method have to be followed to write good CSS code. Just following the best practices is not sufficient to write maintainable CSS.<\/strong><\/p>\r\n            <p><strong>Some of the Architecture patterns for CSS are&nbsp;<a href=\"http:\/\/getbem.com\/introduction\/\" rel=\"noopener\">BEM<\/a>,&nbsp;<a href=\"http:\/\/oocss.org\/\" rel=\"noopener\">OOCSS<\/a>,&nbsp;<a href=\"https:\/\/smacss.com\/\" rel=\"noopener\">SMACSS&nbsp;<\/a>etc. You can go through the documentation and choose whichever pattern fits your tastes and project.<\/strong><\/p>\r\n        <\/section>\r\n    <\/div>\r\n<\/section>",
    "author": "Harry bhai",
    "metaDesc":"CSS (Cascading Style Sheets) is one of the core technologies used for building webpages. Since it is the ONLY style sheet language that browsers can understand, it's important to learn CSS in depth to master web development.",
    "slug":"How-to-learn-CSS"
}